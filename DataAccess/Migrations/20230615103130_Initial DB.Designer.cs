// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(eBookStoreDBContext))]
    [Migration("20230615103130_Initial DB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email_address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("First_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Last_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Address = "Address 1",
                            City = "City 1",
                            Email_address = "Email1@gmail.com",
                            First_name = "Lmao",
                            Last_name = "Lmao",
                            Phone = "1234567890",
                            State = "State 1",
                            Zip = "Zip 1"
                        },
                        new
                        {
                            AuthorId = 2,
                            Address = "Address 2",
                            City = "City 2",
                            Email_address = "Email2@gmail.com",
                            First_name = "Lmao2",
                            Last_name = "Lmao2",
                            Phone = "12345678902",
                            State = "State 2",
                            Zip = "Zip 2"
                        },
                        new
                        {
                            AuthorId = 3,
                            Address = "Address 3",
                            City = "City 3",
                            Email_address = "Email3@gmail.com",
                            First_name = "Lmao3",
                            Last_name = "Lmao3",
                            Phone = "12345678903",
                            State = "State 3",
                            Zip = "Zip 3"
                        },
                        new
                        {
                            AuthorId = 4,
                            Address = "Address 4",
                            City = "City 4",
                            Email_address = "Email4@gmail.com",
                            First_name = "Lmao4",
                            Last_name = "Lmao4",
                            Phone = "12345678904",
                            State = "State 4",
                            Zip = "Zip 4"
                        });
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<decimal?>("Advance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Published_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Royalty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Ytd_sales")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Advance = 5.1m,
                            Notes = "Notes 1",
                            Price = 10.1m,
                            Published_date = new DateTime(2022, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Royalty = 1.1m,
                            Title = "Title 1",
                            Type = "Type 1",
                            Ytd_sales = 100m
                        },
                        new
                        {
                            BookId = 2,
                            Advance = 50.1m,
                            Notes = "Notes 2",
                            Price = 100.1m,
                            Published_date = new DateTime(2022, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            Royalty = 10.1m,
                            Title = "Title 2",
                            Type = "Type 2",
                            Ytd_sales = 1000m
                        },
                        new
                        {
                            BookId = 3,
                            Advance = 500.1m,
                            Notes = "Notes 3",
                            Price = 1000.1m,
                            Published_date = new DateTime(2022, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Royalty = 100.1m,
                            Title = "Title 3",
                            Type = "Type 3",
                            Ytd_sales = 10000m
                        });
                });

            modelBuilder.Entity("BusinessObject.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Author_order")
                        .HasColumnType("int");

                    b.Property<decimal>("Royalty_percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BooksAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1,
                            Author_order = 100,
                            Royalty_percentage = 0.5m
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 2,
                            Author_order = 1000,
                            Royalty_percentage = 0.55m
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 3,
                            Author_order = 10000,
                            Royalty_percentage = 0.555m
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 1,
                            Author_order = 100000,
                            Royalty_percentage = 0.5555m
                        });
                });

            modelBuilder.Entity("BusinessObject.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Publisher_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            City = "City 1",
                            Country = "Country 1",
                            Publisher_name = "Publish 1",
                            State = "State 1"
                        },
                        new
                        {
                            PublisherId = 2,
                            City = "City 2",
                            Country = "Country 2",
                            Publisher_name = "Publish 2",
                            State = "State 2"
                        },
                        new
                        {
                            PublisherId = 3,
                            City = "City 3",
                            Country = "Country 3",
                            Publisher_name = "Publish 3",
                            State = "State 3"
                        });
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Role_desc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Role_desc = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Role_desc = "User"
                        });
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email_adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hire_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Middle_name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email_adress = "Email1User@gmail.com",
                            First_name = "First1",
                            Hire_date = new DateTime(2022, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Last_name = "Last1",
                            Middle_name = "Middle1",
                            Password = "123456",
                            PublisherId = 1,
                            RoleId = 1,
                            Source = "Source1"
                        },
                        new
                        {
                            UserId = 2,
                            Email_adress = "Email2User@gmail.com",
                            First_name = "First2",
                            Hire_date = new DateTime(2022, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Last_name = "Last2",
                            Middle_name = "Middle2",
                            Password = "123456",
                            PublisherId = 2,
                            RoleId = 2,
                            Source = "Source2"
                        },
                        new
                        {
                            UserId = 3,
                            Email_adress = "Email3User@gmail.com",
                            First_name = "First3",
                            Hire_date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Last_name = "Last2",
                            Middle_name = "Middle3",
                            Password = "123456",
                            PublisherId = 3,
                            RoleId = 2,
                            Source = "Source3"
                        });
                });

            modelBuilder.Entity("BusinessObject.Book", b =>
                {
                    b.HasOne("BusinessObject.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BusinessObject.BookAuthor", b =>
                {
                    b.HasOne("BusinessObject.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.HasOne("BusinessObject.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
